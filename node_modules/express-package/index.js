
// Get the reference to path
var
  path = require('path')
;

// Exporting the expressPackage factory
module.exports = expressPackage;

// Export the default externals
expressPackage.externals = [
  // These are libraries that will not be bundled, and some will need to be installed/copied
  "express"
  ,"pg-hstore"
  ,"mime"
  ,"mime-db"
  ,"statuses"
  ,"moment-timezone"
  ,"sequelize"
  ,"tracer"
  ,"conf-stack"
  ,"delay-debug"
  ,"./db" // Not usual for all projects so you can always due options.externals.pop()
];

// Export the default dependencies
expressPackage.dependencies = [
  "express@4.13.4"
  ,"tracer@0.8.3"
  ,"conf-stack@0.*.*"
  // ,"sqlite3@3.1.3"
  // ,"sequelize@3.23.0"
  // ,"delay-debug@0.0.2" // The user should decide to add it, this would allow remote debugging
]

// Configure the server build
function expressPackage(build, options, done ){

  // Set a defaults
  options.dirs.deploy = options.dirs.deploy || path.join(path.resolve(process.mainModule.filename,'..'));
  options.dirs.copy   = options.dirs.copy || [];

  console.log('=======================================');
  console.log('Deployment dir set to: '+options.dirs.deploy);
  console.log('=======================================');

  var
    deployDir = path.resolve(options.dirs.deploy)
    ,config   = {
      output: {
        path           : path.resolve(options.dirs.deploy)
        ,libraryTarget : 'commonjs2'
      }
      ,target: 'node'
      ,externals: options.externals || expressPackage.externals
      ,serverDependencies: options.serverDependencies || expressPackage.dependencies
    }
  ;

  // Execute the npm installation
  console.log("========================================");
  console.log("Installing build dependencies for server");
  console.log("========================================");

  var
    installCmd = 'npm --prefix '+deployDir+' install ' + config.serverDependencies.join(' ')
    ,mkDeploy  = 'mkdir '+deployDir
    ,listCmd   = 'npm --prefix '+deployDir+' ls --depth=0'
    ,copyCmds  = options.dirs.copy.map(function(it){return 'cp -R '+path.resolve(it)+' '+deployDir+'/';})
  ;

  // Attempt to create the deployment directory
  try{ require('fs').mkdirSync(deployDir) } catch(err){ // Ignore errors, are rare here
    console.log('Deploy directory may already exist: ', err.toString());
  };

  // Install and list the installed dependencies
  runCommand([
    installCmd
    // ,listCmd
  ]
  .concat(copyCmds)
  ,function(){
    // Return the suggested config
    done(config);
  });
}


// Run the command requested
function runCommand(cmd, done){
  if(!cmd) return;

  var command = cmd;
  if(typeof cmd !== 'string'){
    command = cmd.shift();
  }

  console.log('==> '+command);
  require('child_process')
  .exec(command
    ,function (error, stdout, stderr) {
     if(stdout) console.log('stdout: ' + stdout);
     if(stderr) console.log('stderr: ' + stderr);
     if (error !== null) {
      console.log('exec error: ' + error);
      done(error)
     } else {
      if(cmd.length) runCommand(cmd, done);
      else done();
     }
  });
}






// =========================================



  // Disable handling of unknown requires
  // build.config.module.unknownContextRegExp= /$^/,
  // build.config.module.unknownContextCritical= false,

  // Disable handling of requires with a single expression
  // build.config.module.exprContextRegExp= /$^/,
  // build.config.module.exprContextCritical= false,

  // Warn for every expression in require
  // build.config.module.wrappedContextCritical= false
